import javafx.animation.Animation;import javafx.animation.FadeTransition;import javafx.event.EventHandler;import javafx.scene.Group;import javafx.scene.control.Button;import javafx.scene.image.Image;import javafx.scene.image.ImageView;import javafx.scene.input.MouseEvent;import javafx.scene.layout.StackPane;import javafx.scene.paint.Color;import javafx.scene.shape.Rectangle;import javafx.scene.text.Font;import javafx.scene.text.Text;import javafx.util.Duration;import java.util.ArrayList;import java.util.HashMap;/*Whenever a property that is not owned is landed on, this screen pops up in which the player is shown the property,where it is on the board, and the options of whether to buy or auction it */public class PropertyScreen {    private Group propRoot = new Group();    private boolean done = false;    private Board b;    private Player p;    private HashMap<String, ArrayList<Property>> props;    public PropertyScreen(Player p, Board b) {        this.p = p;        props = new HashMap<>(p.getProperties());        this.b = b;    }    public Group showProperty(Property property) {        ImageView background = makeImage("firstback.jpg", 0, 0, 1250, 650);        propRoot.getChildren().add(background);        Rectangle rect = new Rectangle();        rect.setX(0);        rect.setY(0);        rect.setHeight(100);        rect.setWidth(200);        rect.setFill(Color.LIGHTBLUE);        ImageView playerPiece = makeImage(p.getIMG(), 50, 50, 100, 50);        String mon = p.getName() + ": $" + Integer.toString(p.getMoney());        Text nameText = new Text();        nameText.setText(mon);        nameText.setFont(Font.font("Comic Sans MS", 18));        nameText.setX(0);        nameText.setY(20);        propRoot.getChildren().add(rect);        propRoot.getChildren().add(playerPiece);        propRoot.getChildren().add(nameText);        ImageView propImg = makeImage(property.getImg(), 50, 200, 250, 325);        propRoot.getChildren().add(propImg);        ImageView board = makeImage("monopolyBoard.jpg", 350, 70, 640, 580);        propRoot.getChildren().add(board);        String text = "All of the properties you own are flashing on the board\nbelow. Click on one to view it";        Text instructions = makeText(text, 350, 30, 25);        propRoot.getChildren().add(instructions);        StackPane s = new StackPane();        s.setLayoutX(0);        s.setLayoutY(120);        Rectangle r = new Rectangle();        r.setWidth(350);        r.setHeight(60);        r.setFill(Color.TRANSPARENT);        Text propName = new Text(property.getName());        propName.setFont(Font.font("Trebuchet MS", 35));        propName.setFill(Color.BLACK);        s.getChildren().addAll(r, propName);        propRoot.getChildren().add(s);        String price = "Price: $" + Integer.toString(property.getPrice());        Text priceText = makeText(price, 120, 560, 25);        propRoot.getChildren().add(priceText);        drawPropertyRects();        return propRoot;    }    //This method draws rectangle over all the properties that the player currently owns    public void drawPropertyRects() {        String[] colors = {"White", "Purple", "Light Blue", "Pink", "Utility", "Orange", "Red", "Yellow", "Green", "Dark Blue"};        Rectangle[] rects = new Rectangle[p.getNumProperties()];        int rectCurr = 0;        for (int i = 0; i < colors.length; i++) {            ArrayList<Property> colorProps = props.get(colors[i]); //props is the HashMap containing all the current player's properties            for (int x = 0; x < colorProps.size(); x++) {                int pos = colorProps.get(x).getPos();                rects[rectCurr] = b.getPlayerRect(p, pos);                FadeTransition rectFade = new FadeTransition(Duration.seconds(1.2), rects[rectCurr]);                rectCurr++;                rectFade.setFromValue(1.0);                rectFade.setToValue(0.0);                rectFade.setCycleCount(Animation.INDEFINITE);                rectFade.play();                rects[rectCurr - 1].setOnMouseClicked(new EventHandler<MouseEvent>() {                    @Override                    public void handle(MouseEvent event) {                        displayProp(pos);                    }                });                propRoot.getChildren().add(rects[rectCurr - 1]);            }        }    }    //When a specific property is clicked, this method is called that displays the property itself along with some info on it    public void displayProp(int pos) {        Rectangle propRect = new Rectangle();        propRect.setX(1000);        propRect.setY(380);        propRect.setWidth(240);        propRect.setHeight(250);        propRect.setFill(Color.BURLYWOOD);        propRect.setStroke(Color.BLACK);        propRoot.getChildren().add(propRect);        Property curr = b.getProperty(pos);        ImageView currProp = makeImage(curr.getImg(), 1000, 70, 240, 300);        propRoot.getChildren().add(currProp);        StackPane s = new StackPane();        s.setLayoutX(1000);        s.setLayoutY(380);        Rectangle nameRect = new Rectangle();        nameRect.setWidth(240);        nameRect.setHeight(40);        nameRect.setFill(Color.TRANSPARENT);        ArrayList<Property> colorProps = props.get(curr.getColor());        Text propName = new Text(curr.getName());        propName.setFont(Font.font("Trebuchet MS", 25));        s.getChildren().addAll(nameRect, propName);        propRoot.getChildren().add(s);        Text currRent = makeText(("Current Rent: $" + Integer.toString(curr.getRent())), 1010, 435, 15);        propRoot.getChildren().add(currRent);        Text numProps = makeText(("Properties of this Color Set\nyou own: " + Integer.toString(colorProps.size()) + "/" + Integer.toString(curr.getNumColors())), 1010, 460, 15);        propRoot.getChildren().add(numProps);        Text monGained = makeText(("Money Gained: $" + Integer.toString(curr.getMonGained())), 1010, 505, 15);        propRoot.getChildren().add(monGained);        Text monSpent = makeText(("Money Spent: $" + Integer.toString(curr.getMonSpent())), 1010, 530, 15);        propRoot.getChildren().add(monSpent);        if (colorProps.size() == curr.getNumColors()) {            String houseText = "Houses: " + curr.getHouses();            Text houseNum = makeText(houseText, 1010, 555, 15);            propRoot.getChildren().add(houseNum);            String hotelsText = "Hotels: " + curr.getHotels();            Text hotelsNum = makeText(hotelsText, 1010, 580, 15);            propRoot.getChildren().add(hotelsNum);        }    }    public Text makeText(String text, int x, int y, int size) {        Text t = new Text();        t.setText(text);        t.setX(x);        t.setY(y);        t.setFont(Font.font("Trebuchet MS", size));        return t;    }    public ImageView makeImage(String imgName, int x, int y, int width, int height) {        Image img = new Image(imgName);        ImageView imgView = new ImageView(img);        imgView.setX(x);        imgView.setY(y);        imgView.setFitWidth(width);        imgView.setFitHeight(height);        return imgView;    }    public Button makeBtn(String text, int x, int y, int width, int height) {        Button btn = new Button(text);        btn.setLayoutX(x);        btn.setLayoutY(y);        btn.setPrefSize(width, height);        return btn;    }}